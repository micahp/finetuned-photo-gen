# Production-ready Docker Compose configuration (DEFAULT)
# Use: docker compose up (production)
# Use: docker compose -f docker-compose.dev.yml up (development)

services:
  # Migration service - runs once then exits
  migrate:
    build:
      context: .
      target: runner
      dockerfile: Dockerfile
      args:
        STRIPE_API_TOKEN: ${STRIPE_API_TOKEN}
        STRIPE_PUBLISHABLE_TOKEN: ${STRIPE_PUBLISHABLE_TOKEN}
        NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
        DATABASE_URL: ${DATABASE_URL}
        NEXT_PUBLIC_GA_TRACKING_ID: ${NEXT_PUBLIC_GA_TRACKING_ID:-}
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-finetuned_photo_gen}?schema=public
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
        echo 'üîç Checking migration status...' &&
        npx prisma migrate status || echo 'Migration status check failed, proceeding...' &&
        echo 'üìä Checking if tables have data...' &&
        USERS_COUNT=$$(psql $$DATABASE_URL -t -c 'SELECT COUNT(*) FROM users;' 2>/dev/null || echo '0') &&
        echo \"Found $$USERS_COUNT users in database\" &&
        if [ \"$$USERS_COUNT\" -gt \"0\" ]; then
          echo '‚ö†Ô∏è  Data found! Using safe migration approach...' &&
          npx prisma db push --skip-generate --accept-data-loss=false || 
          (echo '‚ùå Safe migration failed. Using deploy as fallback...' && npx prisma migrate deploy)
        else
          echo '‚úÖ No existing data found. Running fresh migrations...' &&
          npx prisma migrate deploy
        fi &&
        echo '‚úÖ Migration process completed successfully!'
      "
    networks:
      - app-network
    restart: "no"  # Only run once

  app:
    build:
      context: .
      target: runner
      dockerfile: Dockerfile
      args:
        STRIPE_API_TOKEN: ${STRIPE_API_TOKEN}
        STRIPE_PUBLISHABLE_TOKEN: ${STRIPE_PUBLISHABLE_TOKEN}
        NEXT_PUBLIC_STRIPE_CREATOR_PLAN_PRICE_ID: ${STRIPE_CREATOR_PLAN_PRICE_ID}
        NEXT_PUBLIC_STRIPE_PRO_PLAN_PRICE_ID: ${STRIPE_PRO_PLAN_PRICE_ID}
        NEXT_PUBLIC_STRIPE_ULTRA_PLAN_PRICE_ID: ${STRIPE_ULTRA_PLAN_PRICE_ID}
        NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
        DATABASE_URL: ${DATABASE_URL}
        NEXT_PUBLIC_GA_TRACKING_ID: ${NEXT_PUBLIC_GA_TRACKING_ID:-}
    env_file:
      - .env
    ports:
      - "3005:3005"  # Map port 3005 to host
    expose:
      - "3005"
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-finetuned_photo_gen}?schema=public
      - NEXTAUTH_URL=https://photogen.innovativehype.xyz
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXT_PUBLIC_GA_TRACKING_ID=${NEXT_PUBLIC_GA_TRACKING_ID:-}
      - NEXT_PUBLIC_BASE_URL=https://photogen.innovativehype.xyz
      - STRIPE_API_TOKEN=${STRIPE_API_TOKEN}
      - STRIPE_PUBLISHABLE_TOKEN=${STRIPE_PUBLISHABLE_TOKEN}
      - NEXT_PUBLIC_STRIPE_CREATOR_PLAN_PRICE_ID=${STRIPE_CREATOR_PLAN_PRICE_ID}
      - NEXT_PUBLIC_STRIPE_PRO_PLAN_PRICE_ID=${STRIPE_PRO_PLAN_PRICE_ID}
      - NEXT_PUBLIC_STRIPE_ULTRA_PLAN_PRICE_ID=${STRIPE_ULTRA_PLAN_PRICE_ID}
      # Add other production environment variables as needed
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    volumes:
      # Mount only necessary files for production
      - ./prisma:/app/prisma:ro
    networks:
      - app-network
    restart: unless-stopped
    # Resource limits for production stability
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    # Security enhancements
    security_opt:
      - no-new-privileges:true
    read_only: false  # Next.js needs write access for cache
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3005/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15.8-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-finetuned_photo_gen}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "127.0.0.1:${POSTGRES_PORT:-5432}:5432"  # üîí SECURED: Only localhost access
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-finetuned_photo_gen}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network
    restart: unless-stopped
    # Resource limits for database
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    # Security enhancements
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Automated backup service
  backup:
    image: postgres:15-alpine      # still contains pg_dump
    entrypoint: ["sh", "-c"]       # <-- prevents server startup
    command: >
      while true; do
        echo 'üì¶ Starting backup‚Ä¶';
        TIMESTAMP=$(date +%Y%m%d_%H%M%S);
        BACKUP_FILE="/backups/backup_${TIMESTAMP}.sql";
        pg_dump -h db -U "$POSTGRES_USER" -d "$POSTGRES_DB" > "$BACKUP_FILE";
        gzip "$BACKUP_FILE";
        echo "‚úÖ Backup done: ${BACKUP_FILE}.gz";
        find /backups -name "backup_*.sql.gz" -mtime +"$BACKUP_RETENTION_DAYS" -delete;
        sleep 86400;               # wait 24 h
      done