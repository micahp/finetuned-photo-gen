generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String              @id @default(cuid())
  email                    String              @unique
  name                     String?
  password                 String?
  subscriptionStatus       String              @default("free") @map("subscription_status")
  subscriptionPlan         String?             @map("subscription_plan")
  stripeCustomerId         String?             @map("stripe_customer_id")
  credits                  Int                 @default(10)
  createdAt                DateTime            @default(now()) @map("created_at")
  updatedAt                DateTime            @updatedAt @map("updated_at")
  isAdmin                  Boolean             @default(false) @map("is_admin")
  adminNotes               String?
  apiCallCount             Int                 @default(0)
  emailPreferences         Json?               @default("{\"marketing\": true, \"transactional\": true, \"usage_reports\": false}")
  lastApiCallAt            DateTime?
  purchasedCreditPacks     Json?               @default("[]")
  sessionInvalidatedAt     DateTime?           @map("session_invalidated_at")
  stripeCurrentPeriodEnd   DateTime?           @map("stripe_current_period_end")
  stripePriceId            String?             @map("stripe_price_id")
  stripeSubscriptionId     String?             @unique @map("stripe_subscription_id")
  stripeSubscriptionStatus String?             @map("stripe_subscription_status")
  creditTransactions       CreditTransaction[]
  editedImages             EditedImage[]
  generatedImages          GeneratedImage[]
  jobQueue                 JobQueue[]
  subscriptions            Subscription[]
  userModels               UserModel[]
  generatedVideos          GeneratedVideo[]

  @@map("users")
}

model UserModel {
  id                      String           @id @default(cuid())
  userId                  String           @map("user_id")
  name                    String
  status                  String           @default("pending")
  modelId                 String?          @map("model_id")
  triggerWord             String?          @map("trigger_word")
  trainingImagesCount     Int?             @map("training_images_count")
  trainingStartedAt       DateTime?        @map("training_started_at")
  trainingCompletedAt     DateTime?        @map("training_completed_at")
  createdAt               DateTime         @default(now()) @map("created_at")
  externalTrainingId      String?          @map("external_training_id")
  externalTrainingService String?          @map("external_training_service")
  huggingfaceRepo         String?          @map("huggingface_repo")
  huggingfaceStatus       String?          @map("huggingface_status")
  loraReadyForInference   Boolean          @default(false) @map("lora_ready_for_inference")
  trainingZipFilename     String?          @map("training_zip_filename")
  lastValidationCheck     DateTime?        @map("last_validation_check")
  validationError         String?          @map("validation_error")
  validationStatus        String?          @default("unknown") @map("validation_status")
  replicateModelId        String?          @map("replicate_model_id")
  baseModel               String?          @default("black-forest-labs/FLUX.1-dev") @map("base_model")
  generatedImages         GeneratedImage[]
  trainingImages          TrainingImage[]
  user                    User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_models")
}

model TrainingImage {
  id               String    @id @default(cuid())
  userModelId      String    @map("user_model_id")
  originalFilename String    @map("original_filename")
  s3Key            String    @map("s3_key")
  fileSize         Int?      @map("file_size")
  width            Int?
  height           Int?
  createdAt        DateTime  @default(now()) @map("created_at")
  userModel        UserModel @relation(fields: [userModelId], references: [id], onDelete: Cascade)

  @@map("training_images")
}

model GeneratedImage {
  id                 String     @id @default(cuid())
  userId             String     @map("user_id")
  userModelId        String?    @map("user_model_id")
  prompt             String
  imageUrl           String     @map("image_url")
  s3Key              String?    @map("s3_key")
  generationParams   Json?      @map("generation_params")
  creditsUsed        Int        @default(1) @map("credits_used")
  createdAt          DateTime   @default(now()) @map("created_at")
  cloudflareImageId  String?    @map("cloudflare_image_id")
  fileSize           Int?       @map("file_size")
  generationDuration Int?       @map("generation_duration")
  height             Int?
  originalTempUrl    String?    @map("original_temp_url")
  width              Int?
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userModel          UserModel? @relation(fields: [userModelId], references: [id])

  @@map("generated_images")
}

model EditedImage {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  prompt            String
  url               String
  temporaryUrl      String?  @map("temporary_url")
  width             Int?
  height            Int?
  fileSize          Int?     @map("file_size")
  cloudflareImageId String?  @map("cloudflare_image_id")
  seed              Int?
  processingTimeMs  Int?     @map("processing_time_ms")
  creditsUsed       Int      @default(1) @map("credits_used")
  transactionId     String?  @map("transaction_id")
  metadata          Json?
  createdAt         DateTime @default(now()) @map("created_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("edited_images")
}

model JobQueue {
  id           String    @id @default(cuid())
  userId       String?   @map("user_id")
  jobType      String    @map("job_type")
  status       String    @default("pending")
  payload      Json
  attempts     Int       @default(0)
  maxAttempts  Int       @default(3) @map("max_attempts")
  errorMessage String?   @map("error_message")
  createdAt    DateTime  @default(now()) @map("created_at")
  startedAt    DateTime? @map("started_at")
  completedAt  DateTime? @map("completed_at")
  user         User?     @relation(fields: [userId], references: [id])

  @@map("job_queue")
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @map("user_id")
  stripeSubscriptionId String?   @unique @map("stripe_subscription_id")
  planName             String    @map("plan_name")
  status               String
  currentPeriodStart   DateTime? @map("current_period_start")
  currentPeriodEnd     DateTime? @map("current_period_end")
  monthlyCredits       Int?      @map("monthly_credits")
  createdAt            DateTime  @default(now()) @map("created_at")
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model CreditTransaction {
  id                   String   @id @default(cuid())
  userId               String   @map("user_id")
  amount               Int
  type                 String
  description          String
  relatedEntityType    String?  @map("related_entity_type")
  relatedEntityId      String?  @map("related_entity_id")
  balanceAfter         Int      @map("balance_after")
  metadata             Json?
  createdAt            DateTime @default(now()) @map("created_at")
  relatedEditedImageId String?  @map("related_edited_image_id")
  idempotencyKey       String?  @map("idempotency_key")
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([idempotencyKey], name: "unique_idempotency_key")
  @@unique([userId, relatedEntityId, type], map: "unique_user_entity_type", name: "prevent_duplicate_subscription_credits")
  @@map("credit_transactions")
}

model ProcessedStripeEvent {
  id        String   @id @default(cuid())
  eventId   String   @unique
  createdAt DateTime @default(now())

  @@index([eventId])
}

enum CreditTransactionType {
  earned
  spent
  purchased
  subscription_renewal
  refund
  admin_adjustment
  subscription_created
  manual_adjustment
}

model GeneratedVideo {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  prompt             String
  videoUrl           String   @map("video_url")
  thumbnailUrl       String?  @map("thumbnail_url")
  modelId            String   @map("model_id")
  duration           Int      // Duration in seconds
  aspectRatio        String   @map("aspect_ratio")
  fps                Int      @default(24)
  motionLevel        Int?     @map("motion_level")
  width              Int?
  height             Int?
  fileSize           Int?     @map("file_size")
  generationParams   Json?    @map("generation_params")
  creditsUsed        Int      @default(5) @map("credits_used")
  status             String   @default("completed") // processing, completed, failed
  falJobId           String?  @map("fal_job_id")
  generationDuration Int?     @map("generation_duration") // Generation time in milliseconds
  createdAt          DateTime @default(now()) @map("created_at")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("generated_videos")
}

enum RelatedEntityType {
  image_generation
  image_edit
  model_training
  subscription
  admin_action
  video_generation
}
